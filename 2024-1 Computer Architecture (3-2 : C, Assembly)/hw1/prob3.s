.data
src: .asciiz "IDS Lab"   
n: .word 3               # 복사할 바이트 수 지정
dest: .space 20          # 목적지 버퍼를 위한 공간 할당

.text

# 메인 프로그램 시작
start:
    # 목적지 문자열을 위한 메모리 할당
    li a0, 9              # sbrk (메모리 할당) 시스템 호출 번호
    li a1, 20             # 할당할 바이트 수
    ecall                 # 시스템 호출 실행
    mv s0, a0             # 할당된 메모리 주소를 s0에 저장

    # 할당된 메모리를 0으로 초기화
    li t1, 0              # t1 레지스터를 0으로 초기화 (카운터로 사용)
    mv t2, s0             # t2에 목적지 버퍼의 시작 주소 저장
zero_loop:
    sb x0, 0(t2)          # 현재 t2 주소에 0 저장
    addi t2, t2, 1        # 버퍼 포인터를 1 증가
    addi t1, t1, 1        # 카운터를 1 증가
    blt t1, a1, zero_loop # 20 바이트가 0으로 초기화될 때까지 반복

    # 복사할 바이트 수를 레지스터에 로드
    la t1, n              # n의 주소를 t1에 로드
    lw t1, 0(t1)          # n의 값을 t1 레지스터에 로드

    # 소스에서 목적지로 바이트 복사
    la t3, src            # 소스 문자열의 주소를 t3에 로드
    mv t4, s0             # 목적지 버퍼의 시작 주소를 t4에 저장
    li t5, 0              # 카운터 t5를 0으로 초기화
copy_loop:
    lb t6, 0(t3)          # 소스에서 한 바이트 로드
    sb t6, 0(t4)          # 목적지에 바이트 저장
    addi t3, t3, 1        # 소스 포인터를 1 증가
    addi t4, t4, 1        # 목적지 포인터를 1 증가
    addi t5, t5, 1        # 바이트 카운터를 1 증가
    blt t5, t1, copy_loop # n 바이트 복사가 완료되면 종료

    # 복사된 문자열의 끝에 널 종료 문자 추가
    sb x0, 0(t4)          # 복사된 바이트 뒤에 널 종료 문자 추가

    # 복사된 문자열 출력
    li a0, 4              # print_string 시스템 호출 번호
    mv a1, s0             # 출력할 문자열의 주소
    ecall                 # 문자열 출력

    # 프로그램 종료
    li a0, 10             # 프로그램 종료 시스템 호출 번호
    ecall                 # 프로그램 종료를 위한 시스템 호출 실행
